"""Analytics with Timeframe"""
import json
from collections import defaultdict
from datetime import datetime, timedelta


# def filter_shelling(shelling : list):
import re
from datetime import datetime

data = [{'date': '2025-04-13 21:58:45', 'message': '‚ö†Ô∏è‚úàÔ∏è**–ó–∞–≥—Äo–∑–∞ –ë–ü–õA —Ç–∏–ø—É** **"Shahed"**:\n‚ñ™Ô∏è–ß–µ—Ä–∫–∞—â–∏–Ω–∞‚Üí–£–º–∞–Ω—å/–í—ñ–Ω–Ω–∏—á—á–∏–Ω–∞.\n‚ñ™Ô∏è–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—â–∏–Ω–∞‚Üí–ß–µ—Ä–∫–∞—â–∏–Ω–∞/–í—ñ–Ω–Ω–∏—á–∏–Ω–∞.\n__–ù–∞–ø—Ä—è–º–æ–∫ –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏—Å—è__.\n**–ü–µ—Ä–µ–±—É–≤–∞–π—Ç–µ –≤ —É–∫—Ä–∏—Ç—Ç—è—Ö**!'}, {'date': '2025-04-13 21:48:15', 'message': 'üí• –ß–µ—Ä–∫a—â–∏–Ω–∞ - –≤–∏–±—É—Ö–∏'}, {'date': '2025-04-13 21:44:20', 'message': 'üü¢ 00:27 –í—ñ–¥–±—ñ–π –ø–æ–≤. —Ç—Ä–∏–≤–æ–≥–∏ –≤ \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 –ü–æ–ª—Ç–∞–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å\n   nüü¢ 00:43 –í—ñ–¥–±—ñ–π –ø–æ–≤. —Ç—Ä–∏–≤–æ–≥–∏ –≤ \n                 –î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å'}, {'date': '2025-04-13 21:27:20', 'message': '‚ö†Ô∏è‚úàÔ∏è**–ó–∞–≥—Äo–∑–∞ –ë–ü–õA —Ç–∏–ø—É** **"Shahed"**:\n‚ñ™Ô∏è–ß–µ—Ä–∫–∞—â–∏–Ω–∞‚Üí–®–ø–æ–ª–∞  –∞/–ó–≤–µ–Ω–∏–≥–æ—Ä–æ–¥–∫–∞\n‚ñ™Ô∏è–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—â–∏–Ω–∞‚Üí–ß–µ—Ä–∫–∞—â–∏–Ω–∞.\n‚ñ™Ô∏è–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—â–∏–Ω–∞‚Üí–ù–æ–≤–æ—É–∫—Ä–∞—ó–Ω–∫–∞/–ú–∏–∫–æ–ª–∞—ó–≤—â–∏–Ω–∞.\n_ __–ù–∞–ø—Ä—è–º–æ–∫ –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏—Å—è__.\n**–ü–µ—Ä–µ–±—É–≤–∞–π—Ç–µ –≤ —É–∫—Ä–∏—Ç—Ç—è—Ö**!'}, {'date': '2025-04-13 21:17:39', 'message': 'üî¥ 00:17 –ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞ –≤ \n                 –ü–æ–ª—Ç–∞–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å\nüî¥ 00:21 –ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞ –≤ \n                 –ó–≤–µ–Ω–∏–≥–æ—Ä–æ–¥—Å—å–∫–∏–π —Ä–∞–π–æ–Ω\nüî¥ 00:21 –ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞ –≤ \n                 –£–º–∞–Ω—Å—å–∫–∏–π —Ä–∞–π–æ–Ω'}, {'date': '2025-04-13 21:12:08', 'message': '‚ö†Ô∏è‚úàÔ∏è **–ó–∞–≥—Äo–∑–∞ –ë–ü–õA —Ç–∏–ø—É** **"Shahed"**:\n‚ñ™Ô∏è–ü–æ–ª—Ç–∞–≤—â–∏–Ω–∞‚Üí–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—â–∏–Ω–∞.\n‚ñ™Ô∏è–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—â–∏–Ω–∞‚Üí–ß–µ—Ä–∫ –∫–∞—â–∏–Ω–∞.\n‚ñ™Ô∏è–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—â–∏–Ω–∞‚Üí–ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π|—Ä\n__–ù–∞–ø—Ä—è–º–æ–∫ –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏—Å—è__.\n**–ü–µ—Ä–µ–±—É–≤–∞–π—Ç–µ –≤  —É–∫—Ä–∏—Ç—Ç—è—Ö**!'}, {'date': '2025-04-13 21:04:28', 'message': 'üî¥ 00:04 –ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞ –≤ \n                 –ß–µ—Ä–∫–∞—Å—å–∫–∏–π —Ä–∞–π–æ–Ω\nüî¥ 00:04 –ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞ –≤ \n                 –ó–æ–ª–æ—Ç–æ–Ω—ñ—Å—å–∫–∏–π —Ä–∞–π–æ–Ω'}, {'date': '2025-04-13 21:03:35', 'message': 'üü¢ 00:00 –í—ñ–¥–±—ñ–π –ø–æ–≤. —Ç—Ä–∏–≤–æ–≥–∏ –≤ \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 –í—ñ–Ω–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å\nüü¢ 00:00 –í—ñ–¥–±—ñ–π –ø–æ–≤. —Ç—Ä–∏–≤–æ–≥–∏ –≤ \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 –ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å\nüü¢ 00:00 –í—ñ–¥–±—ñ–π –ø–æ–≤. —Ç—Ä–∏–≤–æ–≥–∏ –≤ \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 –ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å\nüü¢ 00:00 –í—ñ–¥–±—ñ–π –ø–æ–≤. —Ç—Ä–∏–≤–æ–≥–∏ –≤ \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 –ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å\nüü¢ 00:00 –í—ñ–¥–±—ñ–π –ø–æ–≤. —Ç—Ä–∏–≤–æ–≥–∏ –≤ \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 –°—É–º—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å\nüü¢ 00:00 –í—ñ–¥–±—ñ–π –ø–æ–≤. —Ç—Ä–∏–≤–æ–≥–∏ –≤ \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 –•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å\nüü¢ 00:00 –í—ñ–¥–±—ñ–π –ø–æ–≤. —Ç—Ä–∏–≤–æ–≥–∏ –≤ \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 –ü–æ–ª—Ç–∞–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å\nüü¢ 00:01 –í—ñ–¥–±—ñ–π –ø–æ–≤. —Ç—Ä–∏–≤–æ–≥–∏ –≤ \n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 –º. –ö–∏—ó–≤\n üü¢ 00:03 –í—ñ–¥–±—ñ–π –ø–æ–≤. —Ç—Ä–∏–≤–æ–≥–∏ –≤ \n                 –î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å\nüü¢ 00:04 –í—ñ–¥–±—ñ–π –ø–æ–≤. —Ç—Ä–∏–≤–æ–≥–∏ –≤ \n                 –ß–µ—Ä–∫–∞—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å'}, {'date': '2025-04-13 20:56:22', 'message': '‚úàÔ∏è **–ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π/—Ä-–Ω - –æ–±–µ—Ä–µ–∂–Ω–æ**!'}, {'date': '2025-04-13 20:49:29', 'message': "üí•–ö–ö—Ä–∞–º–∞—Ç–æ—Ä—Å—å–∫/–°–ª–æ–≤'—è–Ω—Å—å–∫ (–î–æ–Ω–µ—á—á–∏–Ω–∞) -\xa0 –∑–Ω–æ–≤—É –≤–∏–±y—Ö–∏"}]

def extract_shelling_info(shelling: list):
    alert_keywords = ['–≤–∏–±—É—Ö', '–≤–∏–±—É—Ö–∏', '—É–¥–∞—Ä', '—É–¥–∞—Ä–∏', '–∑–∞–≥—Ä–æ–∑–∞', '—Ä–∞–∫–µ—Ç–∞', '–¥—Ä–æ–Ω', 'shahed', 'üí•', 'üöÄ', '‚úàÔ∏è']

    regions_keywords = {
        "Vinnytska": ["–≤—ñ–Ω–Ω–∏—Ü", "–≤—ñ–Ω–Ω–∏—Ü—å–∫"],
        "Volynska": ["–≤–æ–ª–∏–Ω", "–ª—É—Ü—å–∫"],
        "Dnipropetrovska": ["–¥–Ω—ñ–ø—Ä–æ", "–¥–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤", "–ø–∞–≤–ª–æ–≥—Ä–∞–¥", "–∫—Ä–∏–≤–∏–π —Ä—ñ–≥"],
        "Donetska": ["–¥–æ–Ω–µ—Ü—å–∫", "–∫—Ä–∞–º–∞—Ç–æ—Ä—Å—å–∫", "–º–∞—Ä—ñ—É–ø–æ–ª—å", "–±–∞—Ö–º—É—Ç", "—Å–ª–æ–≤'—è–Ω—Å—å–∫"],
        "Zhytomyrska": ["–∂–∏—Ç–æ–º–∏—Ä"],
        "Zakarpatska": ["—É–∂–≥–æ—Ä–æ–¥", "–∑–∞–∫–∞—Ä–ø–∞—Ç"],
        "Zaporizka": ["–∑–∞–ø–æ—Ä—ñ–∂", "–∑–∞–ø–æ—Ä—ñ–∑—å–∫"],
        "Ivano-Frankivska": ["—ñ–≤–∞–Ω–æ-—Ñ—Ä–∞–Ω–∫—ñ–≤", "—Ñ—Ä–∞–Ω–∫—ñ–≤—Å—å–∫"],
        "Kyivska": ["–∫–∏—ó–≤—Å—å–∫–∞"],
        "Kirovohradska": ["–∫—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥", "–∫—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫"],
        "Luhanska": ["–ª—É–≥–∞–Ω—Å—å–∫", "—Å—î–≤—î—Ä–æ–¥–æ–Ω–µ—Ü—å–∫"],
        "Lvivska": ["–ª—å–≤—ñ–≤", "–ª—å–≤—ñ–≤—Å—å–∫"],
        "Mykolaivska": ["–º–∏–∫–æ–ª–∞—ó–≤"],
        "Odeska": ["–æ–¥–µ—Å–∞", "–æ–¥–µ—Å—å–∫"],
        "Poltavska": ["–ø–æ–ª—Ç–∞–≤–∞", "–ø–æ–ª—Ç–∞–≤—Å—å–∫", "–∫—Ä–µ–º–µ–Ω—á—É–∫"],
        "Rivnenska": ["—Ä—ñ–≤–Ω–µ", "—Ä—ñ–≤–Ω–µ–Ω—Å—å–∫"],
        "Sumska": ["—Å—É–º", "—Å—É–º—Å—å–∫"],
        "Ternopilska": ["—Ç–µ—Ä–Ω–æ–ø", "—Ç–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫"],
        "Kharkivska": ["—Ö–∞—Ä–∫—ñ–≤", "—Ö–∞—Ä–∫—ñ–≤—Å—å–∫"],
        "Khersonska": ["—Ö–µ—Ä—Å–æ–Ω"],
        "Khmelnytska": ["—Ö–º–µ–ª—å–Ω–∏—Ü—å–∫"],
        "Cherkaska": ["—á–µ—Ä–∫–∞—Å", "–∑–æ–ª–æ—Ç–æ–Ω–æ—à–∞", "—á–µ—Ä–∫–∞—â–∏–Ω"],
        "Chernivetska": ["—á–µ—Ä–Ω—ñ–≤—Ü", "–±—É–∫–æ–≤–∏–Ω"],
        "Chernihivska": ["—á–µ—Ä–Ω—ñ–≥—ñ–≤"],
        "Kyiv": ["–º. –∫–∏—ó–≤", "–∫–∏—ó–≤"],
        "Avtonomna Respublika Krym": ["–∫—Ä–∏–º", "—Å–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å", "—è–ª—Ç–∞"],
    }

    result = []
    last_datetime = None

    for entry in shelling:
        msg = entry.get('message', '').lower()
        date_str = entry.get('date', '')
        if not msg or not date_str:
            continue

        try:
            dt = datetime.strptime(date_str, '%Y-%m-%d %H:%M:%S')
        except:
            continue

        if last_datetime is None or dt > last_datetime:
            last_datetime = dt

        date = dt.strftime('%Y-%m-%d')
        # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏—Ç—è–≥–Ω—É—Ç–∏ —á–∞—Å —ñ–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—è–∫—â–æ —î)
        times = re.findall(r'\b\d{2}:\d{2}\b', msg)
        time_used = times[0] if times else dt.strftime('%H:%M')

        if any(keyword in msg for keyword in alert_keywords):
            for region, keywords in regions_keywords.items():
                if any(k in msg for k in keywords):
                    result.append({
                        "date": date,
                        "time": time_used,
                        "city": region
                    })

    last_update_text = last_datetime.strftime('%Y-%m-%d %H:%M') if last_datetime else "üïí –ù–µ–º–∞—î –æ–Ω–æ–≤–ª–µ–Ω—å"

    return result, last_update_text


# def analyze_shelling_timeframe(timeframe='month'):
#     """Analyze shelling for a given timeframe ('day', 'week', 'month')."""
   

#     regions_keywords = {
#         "–í—ñ–Ω–Ω–∏—Ü—å–∫–∞": ["–≤—ñ–Ω–Ω–∏—Ü", "–≤—ñ–Ω–Ω–∏—Ü—å–∫"],
#         "–í–æ–ª–∏–Ω—Å—å–∫–∞": ["–≤–æ–ª–∏–Ω", "–ª—É—Ü—å–∫"],
#         "–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞": ["–¥–Ω—ñ–ø—Ä–æ", "–¥–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤", "–ø–∞–≤–ª–æ–≥—Ä–∞–¥", "–∫—Ä–∏–≤–∏–π —Ä—ñ–≥"],
#         "–î–æ–Ω–µ—Ü—å–∫–∞": ["–¥–æ–Ω–µ—Ü—å–∫", "–∫—Ä–∞–º–∞—Ç–æ—Ä—Å—å–∫", "–º–∞—Ä—ñ—É–ø–æ–ª—å", "–±–∞—Ö–º—É—Ç"],
#         "–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞": ["–∂–∏—Ç–æ–º–∏—Ä"],
#         "–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞": ["—É–∂–≥–æ—Ä–æ–¥", "–∑–∞–∫–∞—Ä–ø–∞—Ç"],
#         "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞": ["–∑–∞–ø–æ—Ä—ñ–∂", "–∑–∞–ø–æ—Ä—ñ–∑—å–∫"],
#         "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞": ["—ñ–≤–∞–Ω–æ-—Ñ—Ä–∞–Ω–∫—ñ–≤", "—Ñ—Ä–∞–Ω–∫—ñ–≤—Å—å–∫"],
#         "–ö–∏—ó–≤—Å—å–∫–∞": ["–∫–∏—ó–≤—Å—å–∫–∞"],
#         "–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞": ["–∫—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥", "–∫—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫"],
#         "–õ—É–≥–∞–Ω—Å—å–∫–∞": ["–ª—É–≥–∞–Ω—Å—å–∫", "—Å—î–≤—î—Ä–æ–¥–æ–Ω–µ—Ü—å–∫"],
#         "–õ—å–≤—ñ–≤—Å—å–∫–∞": ["–ª—å–≤—ñ–≤", "–ª—å–≤—ñ–≤—Å—å–∫"],
#         "–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞": ["–º–∏–∫–æ–ª–∞—ó–≤"],
#         "–û–¥–µ—Å—å–∫–∞": ["–æ–¥–µ—Å–∞", "–æ–¥–µ—Å—å–∫"],
#         "–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞": ["–ø–æ–ª—Ç–∞–≤–∞", "–ø–æ–ª—Ç–∞–≤—Å—å–∫"],
#         "–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞": ["—Ä—ñ–≤–Ω–µ", "—Ä—ñ–≤–Ω–µ–Ω—Å—å–∫"],
#         "–°—É–º—Å—å–∫–∞": ["—Å—É–º", "—Å—É–º—Å—å–∫"],
#         "–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞": ["—Ç–µ—Ä–Ω–æ–ø", "—Ç–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫"],
#         "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞": ["—Ö–∞—Ä–∫—ñ–≤", "—Ö–∞—Ä–∫—ñ–≤—Å—å–∫"],
#         "–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞": ["—Ö–µ—Ä—Å–æ–Ω"],
#         "–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞": ["—Ö–º–µ–ª—å–Ω–∏—Ü—å–∫"],
#         "–ß–µ—Ä–∫–∞—Å—å–∫–∞": ["—á–µ—Ä–∫–∞—Å"],
#         "–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞": ["—á–µ—Ä–Ω—ñ–≤—Ü", "–±—É–∫–æ–≤–∏–Ω"],
#         "–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞": ["—á–µ—Ä–Ω—ñ–≥—ñ–≤"],
#         "–ö–∏—ó–≤": ["–∫–∏—ó–≤"],
#         "–ê–≤—Ç–æ–Ω–æ–º–Ω–∞ –†–µ—Å–ø—É–±–ª—ñ–∫–∞ –ö—Ä–∏–º": ["–∫—Ä–∏–º", "—Å–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å", "—è–ª—Ç–∞"],
#     }
#     region_translit = {
#         "–í—ñ–Ω–Ω–∏—Ü—å–∫–∞": "Vinnytska",
#         "–í–æ–ª–∏–Ω—Å—å–∫–∞": "Volynska",
#         "–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞": "Dnipropetrovska",
#         "–î–æ–Ω–µ—Ü—å–∫–∞": "Donetska",
#         "–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞": "Zhytomyrska",
#         "–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞": "Zakarpatska",
#         "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞": "Zaporizka",
#         "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞": "Ivano-Frankivska",
#         "–ö–∏—ó–≤—Å—å–∫–∞": "Kyivska",
#         "–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞": "Kirovohradska",
#         "–õ—É–≥–∞–Ω—Å—å–∫–∞": "Luhanska",
#         "–õ—å–≤—ñ–≤—Å—å–∫–∞": "Lvivska",
#         "–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞": "Mykolaivska",
#         "–û–¥–µ—Å—å–∫–∞": "Odeska",
#         "–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞": "Poltavska",
#         "–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞": "Rivnenska",
#         "–°—É–º—Å—å–∫–∞": "Sumska",
#         "–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞": "Ternopilska",
#         "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞": "Kharkivska",
#         "–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞": "Khersonska",
#         "–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞": "Khmelnytska",
#         "–ß–µ—Ä–∫–∞—Å—å–∫–∞": "Cherkaska",
#         "–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞": "Chernivetska",
#         "–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞": "Chernihivska",
#         "–ö–∏—ó–≤": "Kyiv",
#         "–ê–≤—Ç–æ–Ω–æ–º–Ω–∞ –†–µ—Å–ø—É–±–ª—ñ–∫–∞ –ö—Ä–∏–º": "Avtonomna Respublika Krym",
#     }

#     alert_keywords = ['–≤–∏–±—É—Ö', '–≤–∏–±—É—Ö–∏', '—É–¥–∞—Ä', '—É–¥–∞—Ä–∏']

#     with open('@povitryanatrivogaaa_messages.json', 'r', encoding='utf-8') as f:
#         data = json.load(f)

#     explosions_by_region = defaultdict(int)
#     today_str = datetime.now().strftime('%Y-%m-%d')

#     if timeframe == 'day':
#         start_date = datetime.now().date()
#     elif timeframe == 'week':
#         start_date = (datetime.now() - timedelta(days=7)).date()
#     elif timeframe == 'month':
#         start_date = (datetime.now() - timedelta(days=30)).date()
#     else:
#         raise ValueError("Invalid timeframe. Choose 'day', 'week', or 'month'.")

#     for entry in data:
#         msg = entry.get("message", "")
#         date_str = entry.get("date", "")

#         if not msg or not date_str:
#             continue

#         msg_date = datetime.strptime(date_str, '%Y-%m-%d %H:%M:%S').date()

#         if msg_date < start_date:
#             continue

#         msg = msg.lower()

#         if any(kw in msg for kw in alert_keywords):
#             for region, keys in regions_keywords.items():
#                 if any(k in msg for k in keys):
#                     explosions_by_region[region] += 1
#                     break

#     result = {}
#     for region_ukr, translit in region_translit.items():
#         result[translit] = explosions_by_region.get(region_ukr, 0)

#     return result
